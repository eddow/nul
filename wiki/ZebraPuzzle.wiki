#summary Traditional Lewis Carol's zebra puzzle
#labels program
= Introduction =

Enigma (from [http://en.wikipedia.org/wiki/Zebra_Puzzle wikipedia])
 # There are five houses.
 # The Englishman lives in the red house.
 # The Spaniard owns the dog.
 # Coffee is drunk in the green house.
 # The Ukrainian drinks tea.
 # The green house is immediately to the right of the ivory house.
 # The Old Gold smoker owns snails.
 # Kools are smoked in the yellow house.
 # Milk is drunk in the middle house.
 # The Norwegian lives in the first house.
 # The man who smokes Chesterfields lives in a house next to the man with the fox.
 # Kools are smoked in a house next to the house where the horse is kept.
 # The Lucky Strike smoker drinks orange juice.
 # The Japanese smokes Parliaments.
 # The Norwegian lives next to the blue house.
Now, who drinks water? Who owns the zebra?

This enigma is especially the kindof problems that declarative languages aim to resolve : knowledge is described, a snap-shot situation is given (no evolution, affectaion, ...).

= NUL zebra =

{{{
"The zebra belongs to the " + zebraOwner + " and water is drunk by the " + waterDrinker
; S(_::nation zebraOwner ::animal "zebra")
; S(_::nation waterDrinker ::drink "water")

; S = houses[1..5]
; houses = { {} => {} [] (n,.. ns) => (_::number n,.. houses[ns]) }
; sigma ={ _,. => {} [] (a,b,.. o) => ((a=>b),.. sigma[b,.. o] ) }
; neighbours = { (a, b); sigma[S](a=>b [] b=>a) }

; S(_::color "red" ::nation "english")			//The Englishman lives in the red house.
; S(_::nation "spaniard" ::animal "dog")		//The Spaniard owns the dog.
; S(_::color "green" ::drink "coffee")			//Coffee is drunk in the green house.
; S(_::nation "ukrainian" ::drink "tea")		//The Ukrainian drinks tea.
; sigma[S][_::color "green"] = (_::color "ivory")	//The green house is immediately to the right of the ivory house.
; S(_::smoke "Old Gold" ::animal "snails")		//The Old Gold smoker owns snails.
; S(_::color "yellow" ::smoke "Kools")			//Kools are smoked in the yellow house.
; S(_::number 3 ::drink "milk")				//Milk is drunk in the middle house.
; S(_::number 1 ::nation "norwegian")			//The Norwegian lives in the first house.
; neighbours(_::smoke "Chesterfields", _::animal "fox")	//The man who smokes Chesterfields lives in the house next to the man with the fox.
; neighbours(_::smoke "Kools", _::animal "horse")	//Kools are smoked in a house next to the house where the horse is kept.
; S(_::smoke "Lucky Strike" ::drink "orange juice")	//The Lucky Strike smoker drinks orange juice.
; S(_::nation "japanese" ::smoke "Parliaments")		//The Japanese smokes Parliaments.
; neighbours(_::nation "norwegian", _::color "blue")	//he Norwegian lives next to the blue house.
}}}

= Description =

The first three lines give the shape of the result: a string showing {{{zebraOwner}}} and {{{waterDrinker}}}, while describing what these unknowns stand for.

The {{{houses}}} auxiliary build a set of numbered houses out of a set of numbers.

The {{{sigma}}} auxiliary is defined in the library `set` as {{{.set.sigma}}} . It is included here to have a library-less version. Sigma builds a function from a list, who for each element of this list associate the following element.
{{{
/*
set.sigma[x_1, ..., x_n] ( x_i => x_(i+1) )
set.sigma[{}] fails
*/
}}}

The {{{neighbours}}} auxiliary assert that the two items are following in the solution either way ( `a,b` or `b,a` ) using sigma.

The remaining lines are the clues.
The first can be red as _The solution set S contains an object whose attribute `nation` is "english" and attribute `color` is "red"_.

= Resolution =

On a 2GHz computer, with Google Chrome, this program needs more than 40 minutes to solve