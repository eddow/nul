#summary Expressions that are not completely specified but on which we have a piece of knowledge
#labels Language

= Fuzzy expressions =

Fuzzy expressions can be defined in _extension_ - with the [GreedyMetaOr greedy meta-or] by example.

Sometimes, it is still nice to define a fuzzy expression by definition.

If you express the for-each sign (back-slash slash : " \/ ") sign followed by an identifier, you can then express an expression that will involve this identifier.
Note: this identifier will never change its value, it has one and, even if we don't know which one yet, it will get always sharper - but never change !
It is like when you try to guess the age of your neighbour. You can get closer and closer but (since you don't take years to find it out), it doesn't change : this is the main difference between imperative languages using affectation and assertive languages using unification.
Note: the local declared will be useable only in the place of the "..." of course.

== Example ==

{{{ \/x  x=(5,_) ; x=(_,3) }}} will give the result (5,3)

{{{\/x (x, x+1) }}} will remain like this, a fuzzy expression meaning " a pair of numbers, where the second one is the first one incremented "

{{{(\/x (x, x+1)) = (5, _) }}} will give the result (5, 6)

= Implicit declaration =

Locals that are specified are created in the local context.
For instance : {{{ { x, 5 } }}} is the equivalent of {{{ { \/x x, 5 } }}}.

Of course, the explicit declaration is useful when you have to specify another context like {{{ \/x { x, 5 } }}}

= Joker shortcut =

The joker is the underscore char ( {{{_}}} ).

This joker react as any other variable name beside the fact that it is considered as never declared : so to declare it explicitely is an error and the implicit declaration always create a new local.
So that {{{ _, _ }}} is equivalent to {{{ x, y }}} and NOT {{{ x, x }}}