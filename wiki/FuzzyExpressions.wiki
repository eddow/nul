#summary Expressions specifying knowledge and locals
#labels Phase-Implementation

= Introduction =

The fuzzy expression are expressions that can evaluate to zero, one or several fixed expression.

They declare _locals_ (the ones that will share the same value among all the fuzzy expression components) as well as _knowledge_ .

= Composition =

== in-expression values ==

The components of a fuzzy expression are :
 * The number-indexed components are _premices_. Their order is important when they are about side-effect.
 * The value of the fuzzy expression is the component indexed _value_ .

== ex-expression values ==

The _fuzzy expression_ object also have non-expression components :
 * _ctxName_ is its context unique name. This context-name will be used by locals under this fuzzy expression to specify this fuzzy expression as a loal index-space.
 * _locals_ can be :
   * The table of local names if debug info is needed
   * The number of _allocated locals_ (the length of local names table) if debug info (local names) is not needed

= Knowledge =

Here are the expressions that can be known in fuzzy-expression premices. All will be expressions that are not yet verified, not yet proven false.

== Equivalences ==

Equivalences are _unification_ expression containing two several expressions.
 * The _Equivalence class_ is the group of items proven equivalent.
 * The _Equivalence class stereotype_ is the item choosen to replace all occurences of these equivalence class.

Internally, the first component of the unification is used as the stereotype - the unification is of course reordered to choose a fitting stereotype.

=== Exemple ===

The fuzzy expression {{{ x + 2 ; x = 3 }}} is the fuzzy expression whose :
 * value is {{{x + 2}}}
 * only premice is {{{x = 3}}}
 * local definition only conains one local : `x`

The equivalence premice is reordered as {{{3 = x}}} while `3` is a better stereotype than `x` (here : because `3` is not context-dependant)
The equivalence class will therefore be represented by the unification {{{3 = x}}}, contains `3` and `x` and have the stereotype `3`.

Later, on _simplification_, the expression {{{x + 2}}} will have its `x` replaced by `3`.

== Inclusion ==

Inclusions are _take_ expression, when an item is token from a set.