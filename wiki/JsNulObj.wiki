#summary Internal representation of NUL objects
#labels Phase-Implementation

= Introduction =

For some object, the nature is known (pairs, numbers, sets, ...)
We can also represent object whose nature is unknown (locals, attributes of other objects, ...)

The internal representation of NulObj are a !JavaScript object that have elements :

== Attribute access ==

The known-nature objects have an `attr` associative list to sotre the attributes value. The other ones still implements atribute access functions.

|| attr || `[`Associative list`]` || A list of the nul.obj properties. Detailed in JsNulObjAttributes. This list is present only when the object has a known nature. ||
|| valAttr || function(string) || Gets the _value_ attribute of this object as a JsNulPossibles. ||
|| fctAttr || function(string, JsNulObj) || Gets the _functional_ attribute of this object, whose is applied the given object as a JsNulPossibles. ||

== Nature knowledge ==

|| defined || function(klg) || Manage to get an object with a known nature ||

`defined` returns this JsNulObj if it is defined, a new JsNulObj if it can be defined in klg or nothing if it cannot be defined.

== Cloneage and modification ==

|| getd || function(string) || Gets the JsNulObj attribute which name is given as parameter ||
|| modd || function(string `attr`, any `val`) || Returns the JsNulObj cloned for which the attribute `attr` now map to `val` ||

{{{obj.getd('a.b')}}} is equivalent to {{{obj.a.b}}}

== The string index ==

The object implements the function `ndx()` that build a string specifying this object.
Two different strings means two different objects. Two equal strings means the same object.