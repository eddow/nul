tp
={ {} => {}
[] (T,.. Ts) => ( T _,.. tp[Ts] )
}
::: shouldn't develop one !



(tuple[Q,str])
; tuple
={	{} => {{}}
[]	(T,.. Ts) => { T _,.. tuple[Ts] _ }
}
::: inf. recursion


:::cas "s s" set auto-inclusive : s is protected while representing ... so what happen ?

(set s) x ==> s x
set
={ {}
[]  (a,.. s) => ( set s [] (a,.. set s) )
}
:::faire!



f = { x = f x }
::: Ca devrait donner l'identitÃ©, pas le gros truc complexe

todo {
inOrder [1..]			//inf decomposition
\/a { _ ::attr a } a	//attribute self-ref 
}

S = houses [1..5]
; houses = { {} => {} [] (n,.. ns) => ((_::number n),.. houses[ns]) }
; sigma ={ \/x {x} => {} [] (a,b,.. o) => ((a=>b),.. sigma[b,.. o] ) }
; neighbours = { (a, b); (a=sigma[S][b] [] b=sigma[S][a])}
; S(_ ::number 3 ::drink "milk")
; S(_ ::number 1 ::nation "norwegian")
; S(_ ::color "red" ::nation "english")
; S(_ ::nation "spaniard" ::animal "dog")
; S(_ ::nation "ukrainian" ::drink "tea")
; S(_ ::nation "japanese" ::smoke "Parliaments")
; S(_ ::color "green" ::drink "coffee")
; S(_ ::smoke "Lucky Strike" ::drink "orange juice")
; S(_ ::smoke "Old Gold" ::animal "snails")
; S(_ ::color "yellow" ::smoke "Kools")
; sigma[S][_ ::color "green"] = (_ ::color "ivory")
; neighbours(_ ::smoke "Kools", _ ::animal "horse")
; neighbours(_ ::smoke "Chesterfields", _ ::animal "fox")
; neighbours(_ ::nation "norwegian", _ ::color "blue")
