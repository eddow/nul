inOrder S
; S = houses [1..5]
; houses = { {} [] (n,.. ns) =>  (_::number n),.. houses ns }
; inOrder = { \/x {x} => {} [] ((a,b,.. o) => (a,b),.. inOrder(b,.. o) ) }

a; N (a.nbr)


todo {
inOrder [1..]			//inf decomposition
\/a { _ ::attr a } a	//attribute self-ref 
}


S = houses [1..5]
; houses = { {} [] (n,.. ns) =>  (_::number n),.. houses ns }
; inOrder = { \/x {x} => {} [] ((a,b,.. o) => (a,b),.. inOrder(b,.. o) ) }
; neighbours = { inOrder S [] (a, b); (inOrder S)(b,a) }
; S(_ ::number 3 ::drink "milk")
; S(_ ::number 1 ::nation "norwegian")
; S(_ ::color "red" ::nation "english")
; S(_ ::nation "spaniard" ::animal "dog")
; S(_ ::nation "ukrainian" ::drink "tea")
; S(_ ::nation "japanese" ::smoke "Parliaments")
; S(_ ::color "green" ::drink "coffee")
; S(_ ::smoke "Lucky Strike" ::drink "orange juice")
; S(_ ::smoke "Old Gold" ::animal "snails")
; S(_ ::color "yellow" ::smoke "Kools")
; (inOrder S)(_ ::color "green", _ ::color "ivory")
; neighbours(_ ::smoke "Kools", _ ::animal "horse")
; neighbours(_ ::smoke "Chesterfields", _ ::animal "fox")
; neighbours(_ ::nation "norwegian", _ ::color "blue")


dblAll (1,2)
; dbl = { x => (x,x) }
; dblAll =
 { {} => {}
[] (a,.. as) => (dbl a),.. (dblAll as)
}


frere "franÃ§ois"
; parent = (("luc", "franÃ§ois"), ("renÃ©", "luc"), ("luc", "olivier"))
; frere = { (a => b); parent(p, a); parent(p, b) }
