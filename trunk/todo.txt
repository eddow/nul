todo: inOrder [1..] ?

{ ((c,.._),(d,.._)); (inOrder [1..5]) (c,d) }
; inOrder = { \/x {x} => {} [] ((a,b,.. o) => (a,b),.. inOrder(b,.. o) ) }

S = ((1,_,_,_,_,_), (2,_,_,_,_,_), (3,_,_,_,_,_), (4,_,_,_,_,_), (5,_,_,_,_,_))
; inOrder = { \/x {x} => {} [] ((a,b,.. o) => (a,b),.. inOrder(b,.. o) ) }
; orderedNeighbours = { ((a,.._),(b,.._)); (inOrder [1..5]) (a,b) }
; neighbours = { (a, b); (orderedNeighbours(a,b) [] orderedNeighbours(b,a)) }
; S(3,_,_,_,_,"milk")
; S(1,_,"norwegian",_,_,_)
; S(_,"red","english",_,_,_)
; S(_,_,"spaniard",_,"dog",_)
; S(_,_,"ukrainian",_,_,"tea")
; S(_,_,"japanese","Parliaments",_,_)
; S(_,"green",_,_,_,"coffee")
; S(_,_,_,"Lucky Strike",_,"orange juice")
; S(_,_,_,"Old Gold","snails",_)
; S(_,"yellow",_,"Kools",_,_)
; orderedNeighbour(S(_,"green",_,_,_,_), S(_, "ivory",_,_,_,_))
; neighbours( S(_,_,_,"Kools",_,_), S(_,_,_,_,"horse",_) )
; neighbours( S(_,_,_,"Chesterfields",_,_), S(_,_,_,_,"fox",_) )
; neighbours( S(_,_,"norwegian",_,_,_), S(_,"blue",_,_,_,_) )


dblAll (1,2)
; dbl = { x => (x,x) }
; dblAll =
 { {} => {}
[] (a,.. as) => (dbl a),.. (dblAll as)
}


frere "franÃ§ois"
; parent = (("luc", "franÃ§ois"), ("renÃ©", "luc"), ("luc", "olivier"))
; frere = { (a => b); parent(p, a); parent(p, b) }
