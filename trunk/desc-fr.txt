La programmation "déclarative" et la programmation "impérative" sont, sur le fond, énormément différentes.
Autant la programmation impérative est peut-être plus intuitive mais du moins la principale utilisée de nos jours (la plupart des programmeurs ne connaissent la programmation "déclarative" que théoriquement), autant la programmation "déclarative" est concise et demande moins de temps de programmation.
Étant donné le peu de recherches dans le domaine des langages déclaratifs comparé aux recherches dans le domaine des langages impératifs (ces dix dernières années, au moins un language impératif est apparu par an : java, javascript, python, c#, ainsi que d'autre moins répandus comme boo, ...), les langages déclaratifs utilisables à l'heure actuelle sont archaïques. La référence en language déclaratif reste le PROLOG né en 1972 !
D'un côté, ce langage utilise des méchanismes "bricolés" qui rendent la programmation ardue (comme la coupure, élément majeur du PROLOG), d'un autre côté, ces languages permettent une interface avec la console (lecture d'une ligne, écriture d'une ligne, ...), ce qui n'est plus d'aucune utilité pratique aujourd'hui. Aussi, ayant été développés dans un but purement logique, il leur manque parfois quelques éléments techniques comme les types ou d'autres découverts récemment, comme l'"Orienté Objet".

en ce qui concerne ce qui est utilisé pour le moment comme source de données et production de données (flux RSS, bases de données, contenu XML, ...) il faut pour ainsi dire maîtriser un langage par type de donnée à travailler.
Le seul language assez léger que pour pouvoir s'exécuter n'importe où sans compilation est le JavaScript qui, pour atteindre une souplesse suffisante applique beaucoup de laxisme ! (Par exemple, ne pas terminer une sentence par un point virgule est parfois une erreur) Ceci est un point crucial quand il s'agit de développer de gros projets : le débogage et la maintenance des gros programmes est très ardue voire impossible.
Dernièrement, le JavaScript n'est pas intrinsèquement prévu pour gérer des données à la volée. L'implémentatation d'une routine de traitement dynamique (lorsque l'utilisateur demande un traitement pariculier sur une page) demande une transaction AJAX qui utilise déjà une vingtaine de lignes de code pour pourvoir aux défauts de compatibilité de JavaScript : Il est déjà largement standard mais chaque implémentation a quand-même ses petites nuances qui augmentent très vite la taille d'un programme qui se veut être opérationnel sur n'importe quelle machine, sur n'importe quel navigateur.
Malgré tous ses défauts, le JavaScript prend une énorme ampleur suite à la nouvelle tendance consistant à traiter la plupart des données chez le client. Il suffit de regarder les derniers google gadgets, équivalents Yahoo ou autres pour voir que les applications se dirigent énormément vers les interfaces Web dont les pages sont dynamiques et pilotées par un script local - et accèdent directement aux données.

Dernièrement, la plupart des langages sont des amas de cas particulier. Que ce soit des cas particuliers de niveau comme dans le C++ où le système des templates est une programmation assez similaire à la programmation C++ mais, relevant d'un autre niveau, se retrouve très vite dépassée quand les besoins sont particuliers. Que ce soit en JavaScript où les tableaux, les associations et les tableaux d'arguments sont des objets à traiter différemment ... alors qu'il s'agit dans le fond d'ensembles de données référencées.

Le langage NUL se veut donc un langage :
- Déclaratif. Il permet sur base de connaissance et non de recettes :
 * De traduire des données (par exemple, une ligne de base de donnée en ligne de tableau HTML)
 * De traduire une opération personnalisée (par ex. :"users.add(email)") en opérations atomiques (sous forme de select, update, insert, delete, ...) Lesquelles opérations seront traduites et exécutée de façon transparente par l'opérateur destination (modification d'une base de donnée locale ou distante, production de flux RSS, modification de contenu XML/HTML, ...) dans une transaction.
- Typé et orienté objet.
- Interprété par un script JavaScript, ce qui lui fournira déjà une base d'utilisabilité solide.
- Optimisant le code : qui puisse exécuter de manière optimale un algorithme même si l'utilisateur l'a décrit de manière simpliste.
- Fonctionnel et souple : les fonctions sont des objets.
- Standardisé : avec un minimum de concepts de base qui permettent d'exprimer succintement tous les objets dont le programmeur a besoin.

