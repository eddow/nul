:::: idee : ne pas faire un simple .pruned() : enlever de 'global' tout ce qui est dans 'g' ... ?

.document["#sandBox b"]
::: bizarre a la reevaluation

.time.now.wertyrt
::: Si query renvoie failed (vide) : pq garder un klg global ?

.set.sigma[1..7]
::: developpe jusque 5 .... Oo

( u::n 1 ::f "u" ::e "o", d::n 2 ::f "d" ::e "t" ) (x ::f "u")
::: fait iech le global : gerer les ior3 du global !!!


x ; "" ::() x
::: doit renvoyer "#text"

.library.file["lib/cmplx.nul"]
.library.file["lib/set.nul"]


set.sigma[1..4]
;set::sigma
 { \/x {x} => {}
[] (a,b,.. o) => ((a=>b),.. set.sigma[b,.. o] )
}
::: devrait noter l'auto-ref

(1, 2) .time.now.seconds
::: ne renvoie pas phi toujours

document["#sandBox"](text _)
xml["test.xml"](text _)


x 1
; set[1..3] x
; set
={ {}
[] \/a \/s (a,.. s) => ( set[s] [] (a,.. set[s]) )
}
:::faire! (developper)

todo {
sigma[1..]			//inf decomposition
}

S = houses [1..5]
; houses = { {} => {} [] (n,.. ns) => ((_::number n),.. houses[ns]) }
; sigma ={ \/x {x} => {} [] (a,b,.. o) => ((a=>b),.. sigma[b,.. o] ) }
; neighbours = { (a, b); sigma[S](a=>b [] b=>a)}
; S(_ ::number 3 ::drink "milk")
; S(_ ::number 1 ::nation "norwegian")
; S(_ ::color "red" ::nation "english")
; S(_ ::nation "spaniard" ::animal "dog")
; S(_ ::nation "ukrainian" ::drink "tea")
; S(_ ::nation "japanese" ::smoke "Parliaments")
; S(_ ::color "green" ::drink "coffee")
; S(_ ::smoke "Lucky Strike" ::drink "orange juice")
; S(_ ::smoke "Old Gold" ::animal "snails")
; S(_ ::color "yellow" ::smoke "Kools")
; sigma[S][_ ::color "green"] = (_ ::color "ivory")
; neighbours(_ ::smoke "Kools", _ ::animal "horse")
; neighbours(_ ::smoke "Chesterfields", _ ::animal "fox")
; neighbours(_ ::nation "norwegian", _ ::color "blue")
