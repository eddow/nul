S = (::number 1, ::number 2, ::number 3)
; S(::number 3 ::drink "milk")

todo {
inOrder [1..]			//inf decomposition
\/a { _ ::attr a } a	//attribute self-ref 
}


S = houses [1..5]
; houses = { {} [] (n,.. ns) =>  (_::number n),.. houses ns }
; inOrder = { \/x {x} => {} [] ((a,b,.. o) => (a,b),.. inOrder(b,.. o) ) }
; orderedNeighbours = { (a, b); (inOrder S) (a,b) }
; neighbours = { (a, b); (orderedNeighbours(a,b) [] orderedNeighbours(b,a)) }
; S(_ ::number 3 ::drink "milk")
; S(_ ::number 1 ::nation "norwegian")
; S(_ ::color "red" ::nation "english")
; S(_ ::nation "spaniard" ::animal "dog")
; S(_ ::nation "ukrainian" ::drink "tea")
; S(_ ::nation "japanese" ::smoke "Parliaments")
; S(_ ::color "green" ::drink "coffee")
; S(_ ::smoke "Lucky Strike" ::drink "orange juice")
; S(_ ::smoke "Old Gold" ::animal "snails")
; S(_ ::color "yellow" ::smoke "Kools")
; orderedNeighbour(S(_ ::color "green"), S(_ ::color "ivory"))
; neighbours( S(_ ::smoke "Kools"), S(_ ::animal "horse") )
; neighbours( S(_ ::smoke "Chesterfields"), S(_ ::animal "fox") )
; neighbours( S(_ ::nation "norwegian"), S(_ ::color "blue") )


dblAll (1,2)
; dbl = { x => (x,x) }
; dblAll =
 { {} => {}
[] (a,.. as) => (dbl a),.. (dblAll as)
}


frere "franÃ§ois"
; parent = (("luc", "franÃ§ois"), ("renÃ©", "luc"), ("luc", "olivier"))
; frere = { (a => b); parent(p, a); parent(p, b) }
